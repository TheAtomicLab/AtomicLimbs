@using Limbs.Web.ViewModels;
@using Limbs.Web.Entities.Models;
@using Limbs.Web.Resources


@model OrderUpdateModel

@{
    ViewBag.Title = OrdersTexts.Edit_ViewBag_title;
    var cantImages = Model.TotalImages;
}

<link rel="stylesheet" href="~/Content/basic.css">
<link rel="stylesheet" href="~/Content/dropzone.css">
<link rel="stylesheet" href="~/Content/jquery.bxslider.min.css">

<div class="card center-card-l">
    <h2>@OrdersTexts.Edit_h2</h2>

    @using (Html.BeginForm("Edit", "Orders", FormMethod.Post, new { id = "frmEdit", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.HasDesign)
            @Html.HiddenFor(model => model.PreviousAmputationTypeId)
            <div class="form-group">
                <p class="form_title">@Html.LabelFor(model => model.ProductType, htmlAttributes: new { @class = "control-label" })</p>
                <div class="col-md-10">
                    @Html.EditorFor(x => x.ProductType, new { htmlAttributes = new { @class = "f-campo f-post-l" } })
                    @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <p class="form_title">@Html.LabelFor(model => model.AmputationTypeFkId, htmlAttributes: new { @class = "control-label" })</p>
                <div id="tipo_de_amp" class="col-md-10">
                    @{
                        var amputationDesigns = ViewData["ListAmputations"] == null ? new List<AmputationDesign>() : ViewData["ListAmputations"] as List<AmputationDesign>;

                        foreach (var amputationDesign in amputationDesigns)
                        {
                            <div class="selector_amp" style="background-image: url(@amputationDesign.Amputation.PrimaryUrlImage); background-size: contain; background-repeat: no-repeat;" title="@amputationDesign.Amputation.Description" data-idAmputation="@amputationDesign.Amputation.Id" data-hasdesign="@(amputationDesign.HasDesign ? "1" : "0")" onclick="select_amp(this)">
                                <div class="selector_size"></div>
                                @Html.RadioButtonFor(b => Model.AmputationTypeFkId, amputationDesign.Amputation.Id, new { @class = "tipo_amp", title = amputationDesign.Amputation.Description })
                            </div>
                        }
                    }
                    <div class="no-design" @(Model.HasDesign ? "style=display:none;" : string.Empty)>
                        <h2>@OrdersTexts.Edit_no_design_h2</h2>
                        <p>
                            @OrdersTexts.Edit_no_design_p
                        </p>
                    </div>
                    @Html.ValidationMessageFor(model => model.AmputationTypeFkId, "", new { @class = "text-danger" })

                </div>
            </div>

            <div class="form-group">
                <p class="form_title">@OrdersTexts.Edit_Images</p>
                <div class="slider">
                    @foreach (var image in Model.Images)
                    {
                        <div class="slider-image-container">
                            <img src="@image" />
                            @{
                                var imageId = image.Split('/').LastOrDefault();
                                imageId = imageId == null ? string.Empty : imageId;
                            }
                            <div class="slider-image-action" data-imageId="@imageId" data-orderId="@(Model.Id)">
                                <i class="fa fa-trash-o action" aria-hidden="true"></i>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="form-group">
                <p class="form_title">@OrdersTexts.Edit_addImages</p>
                <div class="col-md-10">
                    <div id="edit-upload-images" class="dropzone" style="display: none;">
                        <span id="msgManoImagen" style="color:blue;"></span>
                        <ul id="msgErrorManoImagen" style="color:red;"></ul>
                    </div>

                    <h3 id="title-no-more-images" style="display: none;">@OrdersTexts.Edit_title_no_more_images</h3>
                </div>
            </div>
            <br />
            <div class="form-group">
                <div class="col-md-10">
                    <div id="color-container" @(!Model.HasDesign ? "style=display:none;" : string.Empty)>
                        <p class="form_title">@OrdersTexts.Edit_Color</p>
                        <div class="sel_color_container">
                            @{
                                var colors = ViewData["renderColors"] == null ? new List<ColorModel>() : ViewData["renderColors"] as List<ColorModel>;

                                foreach (var color in colors)
                                {
                                    <div class="sel_color_mano" style="background-image: url(@color.PrimaryUrlImage);background-size: contain; background-repeat: no-repeat;">
                                        @Html.RadioButtonFor(model => Model.ColorFkId, color.Id, new { @class = "selector_color_input" })
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <p class="form_title">
                    @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label" })
                </p>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="button" id="enviar" value="@OrdersTexts.Edit_EnviarButton" class="bn_blue" />
                </div>
            </div>
        </div>
    }

    @section Scripts {
        <script src="~/Scripts/dropzone.js"></script>
        <script src="~/Scripts/jquery.bxslider.min.js"></script>

        <script>
            function fnValidateDynamicContent() {
                var currForm = $('#frmEdit');
                currForm.removeData("validator");
                currForm.removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse(currForm);
                currForm.validate(); 
            }

            let hasDesignHidden = $('#HasDesign');
            $.validator.unobtrusive.adapters.addBool("mandatory", "required");

            function select_amp(obj) {
                var $obj = $(obj);
                $('.selector_amp').removeClass('amp_selected');
                $obj.addClass('amp_selected');
                let hasDesign = $obj.attr('data-hasdesign');
                let idAmputation = $obj.attr('data-idAmputation');

                var radio = $obj.find('input')[0];
                $(radio).prop('checked', true);
                if (hasDesign !== "1") {
                    $(".no-design").show();
                    $('.sel_color_container').empty();
                    $('#color-container').hide();

                    hasDesignHidden.val("False");
                } else {
                    $(".no-design").hide();
                    hasDesignHidden.val("True");

                    $.ajax({
                        url: '@(Url.Action("GetColors","Orders"))',
                        data: {
                            amputationId: idAmputation
                        },
                        type: 'GET',
                        success: function (response) {
                            if (response.isSuccessfully) {
                                let containerColors = $('.sel_color_container');
                                containerColors.empty();

                                response.colors.forEach(function (color) {
                                    containerColors.append(`<div class="sel_color_mano" style="background-image: url(${color.PrimaryUrlImage});background-size: contain; background-repeat: no-repeat;">
                                        <input class="selector_color_input" id="ColorFkId" name="ColorFkId" type="radio" data-val="true" data-val-mandatory="@OrdersTexts.Edit_GetColors_dataValMandatory" value="${color.Id}">
                                    </div>`);
                                });

                                fnValidateDynamicContent();

                                $('#val-color-msg').remove();
                                $('#color-container').append(`<span id="val-color-msg" class="field-validation-valid text-danger" data-valmsg-for="ColorFkId" data-valmsg-replace="true"></span>`);
                                $('#color-container').show();
                            } else {
                                alert('@OrdersTexts.Edit_GetColors_Error');
                            }
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            console.log(textStatus, errorThrown);
                        }
                    });

                }
                $('#enviar').prop('disabled', false);
            }

    $(document).ready(function () {
                $('.sel_color_container').on('click', '.sel_color_mano', function () {
                        var $obj = $(this);
                        $('.sel_color_mano').removeClass('color_selected')

                        $obj.addClass('color_selected');

                        var radio = $obj.find('input')[0];
                        $(radio).prop('checked', true);
                });

                $('.tipo_amp:checked').parent().addClass('amp_selected');
                $('.selector_color_input:checked').parent().addClass('color_selected');

                var typeFileAccepted = "image/*";
                var maxFileSizeImage = 5;
                var uploadMultipleVar = true;
                var maxUploadFiles = @(8 - cantImages);
                var fileTooBigMsg = "@OrdersTexts.Edit_Image_fileTooBigMsg: " + maxFileSizeImage + " MB.";
                var invalidFileTypeMsg = "@OrdersTexts.Edit_Image_invalidFileTypeMsg";
                var msgWhileUploadFile = "@OrdersTexts.Edit_Image_msgWhileUploadFile";

                let frm = $('#frmEdit');
                let titleNoUploadImages = $('#title-no-more-images');
                let dropzoneContainerClass = $('#edit-upload-images');

        frm.on('submit', function (e) {
            e.preventDefault();

            if ($(this).valid()) {
                $.post(frm.attr('action'), frm.serialize(), function (json) {
                    window.location = json.Action;
                }, 'json');
            }

                    return false;
                });

                var myDropzone = $("#edit-upload-images").dropzone({
                    url: '/Orders/Edit/',
                    previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-imageMano\"><img data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n </div>",
                    maxFilesize: maxFileSizeImage,
                    maxFiles: maxUploadFiles,
                    uploadMultiple: uploadMultipleVar,
                    maxThumbnailFilesize: 5,
                    acceptedFiles: typeFileAccepted,
                    autoProcessQueue: false,
                    autoQueue: true,
                    addRemoveLinks: true,
                    dictDefaultMessage: "<i class=\"fa fa-upload fontFileUpload\" aria-hidden=\"true\" style=\"font-size: 5em;color: #2a2a56;\"></i><br><span class=\"fontUploadFile\">@OrdersTexts.Edit_myDropzone_dictDefaultMessage<span>",
                    dictInvalidFileType: null,
                    dictRemoveFile: "Borrar imagen",
                    dictCancelUpload: null,
                    dictRemoveFileConfirmation: null,
                    createImageThumbnails: true,
                    init: function () {
                        dz = this;
                        dz.on('sendingmultiple', sendingMultiple);
                        dz.on("processingmultiple", processing);
                        dz.on("addedfile", addedFile);
                        dz.on("removedfile", removedFile);
                        dz.on("error", errorDropzone);
                        dz.on("success", successDropzone);
                    }
                });

                $('#enviar').click(function () {
                    console.log(dz);
                    if (dz.files.length > 0) {
                        dz.processQueue();
                    } else {
                        frm.submit();
                    }
                });

                function successDropzone(file, response) {
                    window.location = response.Action;
                }

                function errorDropzone(file, errormessage, xhr) {
                    if (xhr == undefined)
                        return false;

                    var t = xhr.response.responseText;

                    $('#msgManoImagen').empty();
                    $('#msgErrorManoImagen').empty();
                    showError("@OrdersTexts.Edit_errorDropzone");
                    console.log($(errormessage)[1].textContent);

                    disabledRegister();
                }

                 function removedFile(file) {
                    $('#msgErrorManoImagen').empty();
                    updateRegisterFiles();
                    dz.files.length == 0 ? disabledRegister() : "";
                 }

                function processing(file) {
                    $('#msgManoImagen').empty();
                    $('#msgManoImagen').html(msgWhileUploadFile);
                }

                function addedFile(file) {
                    if (dz.files.length > maxUploadFiles) {
                        dz.removeFile(dz.files[0]);
                    }

                    console.log(file);

                    $('#msgErrorManoImagen').empty();

                    updateRegisterFiles();
                }

                function sendingMultiple(file, xhr, data) {
                    var array = frm.serializeArray();
                    for (var i = 0; i < array.length; i++) {
                        data.append(array[i].name, array[i].value)
                    }
                }

                function updateRegisterFiles() {
                    for (var i = 0; i < dz.files.length; i++) {

                        var file = dz.files[i];

                        if (!isConditionsValid(file)) {
                            disabledRegister();
                            showErrors(file);
                            break;
                        } else {
                            enableRegister();
                        }
                    }
                }

                function isValidSizeImage(file, nro) {
                    //var sizeFile = file.size / 1024 / 1024;
                    sizeFile = file.size / 1000000 // -> Dropzone calculate size
                    return sizeFile <= nro;
                }

                function showError(msg) {
                    var ErrorMsg = "<li>" + msg + "</li>";

                    $('#msgErrorManoImagen').append(ErrorMsg);
                }

                function disabledRegister() {
                    $("[name=enviar]").prop('disabled', true);
                };

                function enableRegister() {
                    $("[name=enviar]").prop('disabled', false);
                };

                function isConditionsValid(file) {
                    var ConditionTypeImage = Dropzone.isValidFile(file, typeFileAccepted);
                    var ConditionSizeImage = isValidSizeImage(file, maxFileSizeImage);

                    return ConditionTypeImage && ConditionSizeImage;
                }

                function showErrors(file) {
                    var ConditionTypeImage = Dropzone.isValidFile(file, typeFileAccepted);
                    Dropzone.sizeFile
                    var ConditionSizeImage = isValidSizeImage(file, maxFileSizeImage);

                    if (!ConditionSizeImage) {
                        showError(fileTooBigMsg);
                    }

                    if (!ConditionTypeImage) {
                        showError(invalidFileTypeMsg);
                    }
                }

                $('.tipo_amp2').change(function () {
                    let ampValue = $(this).val();
                    let noDesignBox = $('.no-design');
                    switch (ampValue) {
                        case 'A':
                        case 'B':
                        case 'G':
                        case 'H':
                            noDesignBox.show();
                            break;
                        case 'C':
                        case 'D':
                        case 'E':
                        case 'F':
                            noDesignBox.hide();
                            break;
                        default:
                            noDesignBox.hide();
                            break;
                    }
                })

                let imagesCount = @cantImages;
                if (imagesCount >= 8) {
                    titleNoUploadImages.show();
                } else {
                    dropzoneContainerClass.show();
                }

                var slider = $('.slider').bxSlider({
                    pager: true,
                    adaptiveHeight: true,
                    touchEnabled: false
                });

                let modal = $('#myModal');
                let span = $("#close_modal");

                span.click(function () {
                    modal.hide();
                });

                $('.action').click(function () {
                    if (imagesCount == 1) {
                        return;
                    }

                    let parent = $(this).parent();
                    modal.attr('data-modalOrderId', parent.attr('data-orderId'));
                    modal.attr('data-modalImageId', parent.attr('data-imageId'));

                    $('#myModal').show();
                });

                $('#btn-modal-delete').click(function () {
                    let imageId = modal.attr('data-modalImageId');
                    $.ajax({
                        url: '@(Url.Action("DeleteImage","Orders"))',
                        data: {
                            OrderId: modal.attr('data-modalOrderId'),
                            FileNameBlob: imageId
                        },
                        type: 'POST',
                        success: function (response) {
                            if (response.IsSuccesful) {
                                imagesCount--;

                                if (imagesCount < 8) {
                                    maxUploadFiles = 8 - imagesCount;
                                    dz.options.maxFiles = 8 - imagesCount;

                                    titleNoUploadImages.hide();
                                    dropzoneContainerClass.show();
                                }

                                let imageFromSlider = $('div[data-imageId="' + imageId + '"]').parent();
                                imageFromSlider.remove();
                                //parent.parent().remove();
                                slider.reloadSlider();

                                modal.hide();
                            } else {
                                alert('@OrdersTexts.Edit_deleteImage_error');
                                modal.hide();
                            }
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            console.log(textStatus, errorThrown);
                            modal.hide();
                        }
                    });
                });
            });
        </script>
    }
</div>

<!-- The Modal -->
<div id="myModal" class="modal" data-modalOrderId="" data-modalImageId="" style="display: none;">
    <div class="limbs-modal-container">
        <!-- Modal content -->
        <div class="limbs-modal-header">
            <span id="close_modal" class="close">&times;</span>
            <h3>@OrdersTexts.Edit_deleteImage_h3_1</h3>
        </div>
        <div class="limbs-modal-content">
            <h3 class="text-error modal-body-title">@OrdersTexts.Edit_deleteImage_h3_2</h3>
            <div class="form-group">
                <input id="btn-modal-delete" type="button" class="btn btn-default bn_blue" value="@OrdersTexts.Edit_deleteImage_button" />
            </div>
        </div>
    </div>
</div>