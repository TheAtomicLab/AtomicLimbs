@model Limbs.Web.Entities.Models.OrderModel

@{
    ViewBag.Title = "Edit";
    var cantImages = 0;
}

<link rel="stylesheet" href="~/Content/basic.css">
<link rel="stylesheet" href="~/Content/dropzone.css">

<div class="card center-card-l">
    <h2>Editar orden</h2>

    @using (Html.BeginForm("Edit", "Orders", FormMethod.Post, new { id = "frmEdit", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                <p class="form_title">@Html.LabelFor(model => model.ProductType, htmlAttributes: new { @class = "control-label" })</p>
                <div class="col-md-10">
                    @Html.EditorFor(x => x.ProductType, new { htmlAttributes = new { @class = "f-campo f-post-l" } })
                    @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <p class="form_title">@Html.LabelFor(model => model.AmputationType, htmlAttributes: new { @class = "control-label" })</p>
                <div class="col-md-10 edit_type_amp">

                    @Html.RadioButtonFor(model => model.AmputationType, "A", new { @class = "tipo_amp2" })
                    @Html.RadioButtonFor(model => model.AmputationType, "B", new { @class = "tipo_amp2" })
                    @Html.RadioButtonFor(model => model.AmputationType, "C", new { @class = "tipo_amp2" })
                    @Html.RadioButtonFor(model => model.AmputationType, "D", new { @class = "tipo_amp2" })
                    @Html.RadioButtonFor(model => model.AmputationType, "E", new { @class = "tipo_amp2" })
                    @Html.RadioButtonFor(model => model.AmputationType, "F", new { @class = "tipo_amp2" })
                    @Html.RadioButtonFor(model => model.AmputationType, "G", new { @class = "tipo_amp2" })
                    @Html.RadioButtonFor(model => model.AmputationType, "H", new { @class = "tipo_amp2" })

                    @Html.ValidationMessageFor(model => model.AmputationType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <p class="form_title">Agregar nuevas imagenes</p>
                <div class="col-md-10">
                    <div id="myId" class="dropzone"></div>
                </div>
            </div>
            <br />
            <div class="form-group">
                <div class="col-md-10">
                    <div>
                        <p class="form_title">Color</p>
                        <div class="color_mano">
                            @Html.RadioButtonFor(model => model.Color, "A")
                            @Html.RadioButtonFor(model => model.Color, "B")
                            @Html.RadioButtonFor(model => model.Color, "C")
                            @Html.RadioButtonFor(model => model.Color, "D")
                            @Html.RadioButtonFor(model => model.Color, "E")
                            @Html.RadioButtonFor(model => model.Color, "F")
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <p class="form_title">
                    @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label" })
                </p>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Guardar" class="bn_blue" />
                </div>
            </div>
        </div>
    }

    @*<div>
        @Html.ActionLink("Volver", "Index")
    </div>*@

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
</div>

<style>
    .img-delete-container{
        width: 30%;
        height: 100%;
    }

    .img-delete-container:hover {
        background-color: rgba(0,0,0,.75);
    }

    .dz-remove {
        margin-top: 1em;
    }

    .dz-imageMano {
        height: 120px;
    }

    .dz-imageMano img {
        height: 100%;
        width: 100%;
        object-fit: cover;    
    }
</style>


@*<script src="~/Scripts/pages/uploadImage.js"></script>*@
<script src="~/Scripts/dropzone.js"></script>

<script>
    var typeFileAccepted = "image/*";
    var maxFileSizeImage = 5; //MB
    var maxUploadFiles = 6;
    var fileTooBigMsg = "El archivo es muy grande. Tamaño máximo permitido: " + maxFileSizeImage + " MB.";
    var invalidFileTypeMsg = "Tipo de archivo inválido";
    var msgWhileUploadFile = "Subiendo imagen, por favor espere";
    let frm = $('#frmEdit');

    var myDropzone = new Dropzone("div#myId", {
        url: frm.attr('action'),
        previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-imageMano\"><img data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n </div>",
        maxFilesize: maxFileSizeImage,
        maxFiles: maxUploadFiles,
        uploadMultiple: true,
        maxThumbnailFilesize: 5,
        acceptedFiles: "image/*",
        autoProcessQueue: false,
        autoQueue: true,
        addRemoveLinks: true,
        dictDefaultMessage: "<i class=\"fa fa-upload fontFileUpload\" aria-hidden=\"true\" style=\"font-size: 5em;color: #2a2a56;\"></i><br><span class=\"fontUploadFile\">Arrastre su imagen aquí o presione click para cargar una.<span>",
        //dictFileTooBig: fileTooBig,
        //dictInvalidFileType: "El tipo de archivo es invalido.",
        //dictFileTooBig: null,
        dictInvalidFileType: null,
        dictRemoveFile: "Borrar imagen",
        dictCancelUpload: null,
        //dictCancelUploadConfirmation: "¿Estas seguro de cancelar la subida de la foto?",
        dictRemoveFileConfirmation: null,
        //dictMaxFilesExceeded: "No puedes subir más de una imagen.",
        createImageThumbnails: true,
        init: function () {
            dropZoneManoMedidas = this;
            
            frm.submit(function (e) {
                if (!$(this).valid()) {
                    e.preventDefault();
                } else {
                    dropZoneManoMedidas.processQueue();
                }
            });
        }
});


    var slideIndex = 1;
    showSlides(slideIndex);

    // Next/previous controls
    function plusSlides(n) {
        showSlides(slideIndex += n);
    }

    // Thumbnail image controls
    function currentSlide(n) {
        showSlides(slideIndex = n);
        $('input[name=selectPhoto]').val(n);
    }

    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        var dots = document.getElementsByClassName("dot");
        if (n > slides.length) { slideIndex = 1 }
        if (n < 1) { slideIndex = slides.length }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        for (i = 0; i < dots.length; i++) {
            dots[i].className = dots[i].className.replace(" active", "");
        }
        slides[slideIndex - 1].style.display = "block";
        dots[slideIndex - 1].className += " active";
    }
</script>