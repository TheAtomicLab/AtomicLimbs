@using System.Configuration
@model Limbs.Web.Entities.Models.UserModel
@{
    var googleKey = ConfigurationManager.AppSettings["Google.Maps.Key"] ?? "NOKEYINCONFIG";

    var locationLatitude = Model?.Location == null ? -34.6338038 : Model.Location.Latitude;
    var locationLongitude = Model?.Location == null ? -58.4107765 : Model.Location.Longitude;
}

@Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "f-campo", onFocus = "geolocate()", placeholder = HttpUtility.HtmlDecode(Html.DisplayNameFor(x => x.Address).ToHtmlString()) } })
@Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "f-campo", placeholder = HttpUtility.HtmlDecode(Html.DisplayNameFor(x => x.Address2).ToHtmlString()) } })
<div class="f-campo-mitad">
    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "f-campo", placeholder = HttpUtility.HtmlDecode(Html.DisplayNameFor(x => x.State).ToHtmlString()) } })
    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "f-campo", placeholder = HttpUtility.HtmlDecode(Html.DisplayNameFor(x => x.City).ToHtmlString()) } })
</div>
@Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "f-campo", placeholder = HttpUtility.HtmlDecode(Html.DisplayNameFor(x => x.Country).ToHtmlString()) } })

<div style="margin-bottom: 20px;">
    <h3>¿Ésta es tu dirección?</h3>
    <h4 style="margin: 0 -50px;">Buscá en el mapa, y hacé click en la ubicación correcta.</h4>
    <div id="map" style="height: 400px; width: 400px; margin-left: -50px;margin-top: 10px;"></div>
    <h5 style="margin: 0 -50px;">Es importante que ubiques tu dirección correctamente para gestionar tu pedido.</h5>
    @Html.HiddenFor(x => x.LatLng)
    <br />
</div>

<script>

        var placeSearch, autocomplete;
        var componentForm = {
            street_number: ['short_name', '@Html.IdFor(x => x.Address)'],
            route: ['long_name', '@Html.IdFor(x => x.Address)'],
            locality: ['long_name', '@Html.IdFor(x => x.City)'],
            administrative_area_level_1: ['short_name', '@Html.IdFor(x => x.State)'],
            country: ['long_name', '@Html.IdFor(x => x.Country)'],
        };

        function initAutocomplete() {

            autocomplete = new google.maps.places.Autocomplete((document.getElementById('@Html.IdFor(x => x.Address)')),
                { types: ['geocode'] });
            autocomplete.addListener('place_changed', fillInAddress);

            var myLatLng = {
                lat: @locationLatitude,
                lng: @locationLongitude
            };

            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 17,
                center: myLatLng
            });

            addMarker(myLatLng, map);

            google.maps.event.addListener(map, 'click', function(event) {
                addMarker(event.latLng, map);
            });

        }

        var map;
        var marker;

        function addMarker(location, map) {
            if(marker){ marker.setMap(null); }
            marker = new google.maps.Marker({
                position: location,
                map: map
            });
            marker.setMap(map);
            var latlng = marker.getPosition().lat() + "," + marker.getPosition().lng();
            console.log(latlng);
            $("#@Html.IdFor(x => x.LatLng)").val(latlng);
        }

        function fillInAddress() {
            var place = autocomplete.getPlace();

            addMarker(place.geometry.location, map);
            map.setCenter(place.geometry.location);

            for (var component in componentForm) {
                document.getElementById(componentForm[component][1]).value = '';
            }

            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType][0]];

                    if (document.getElementById(componentForm[addressType][1]).value !== '') {
                        var cVal = document.getElementById(componentForm[addressType][1]).value;
                        document.getElementById(componentForm[addressType][1]).value = val + " " + cVal;
                    }
                    else {
                        document.getElementById(componentForm[addressType][1]).value = val;
                    }
                }
            }
        }

        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }

        function codeAddress() {
            var geocoder = new google.maps.Geocoder();

            var country = $("#Country").val();
            var state = $("#State").val();
            var city = $("#City").val();
            var address = $("#Address").val();
            var addressMap = address + ", " + city + ", " + state + ", " + country;
            geocoder.geocode({ 'address': addressMap }, function (results, status) {
                if (status == 'OK') {

                    addMarker(results[0].geometry.location, map);
                    map.setCenter(results[0].geometry.location);

                } else {
                    console.log('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

        @*function markIsAtomic() {

            var distance = getDistanceFromLatLonInKm(@locationLatitude,@locationLongitude, marker.getPosition().lat(), marker.getPosition().lng())

            //si es menor a 0.3km pregunto si su dirección esta correcta en el mapa
            var umbral = 0.3;
            if (distance < umbral) {

                //seteo nuevo mark en el mapa
                codeAddress();

                var result = confirm("¿Está seguro que su dirección en el mapa es correcta?");
                if (result == false) {
                    return false;
                }
            }
        }*@

        $("#Address").blur(function () {
            codeAddress();
        });

        $("#City").blur(function () {
            codeAddress();
        });
        
        $("#State").blur(function () {
            codeAddress();
        });

        $("#Country").blur(function () {
            codeAddress();
        });

        function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
            var R = 6371;
            var dLat = (lat2 - lat1) * (Math.PI / 180);
            var dLon = (lon2 - lon1) * (Math.PI / 180);
            var a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2)
                ;
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c;
            return d;
        }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=@(googleKey)&libraries=places&callback=initAutocomplete" async defer></script>