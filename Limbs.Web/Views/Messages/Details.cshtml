@using Limbs.Web.Resources
@using Limbs.Web.Entities.Models
@using Microsoft.AspNet.Identity
@model MessageModel
@{
    var to = Model.To.Email;
    if (User.IsInRole(AppRoles.Administrator))
    {
        to += $" - {Model.From.Email}";
    }
    if (to == User.Identity.GetUserName())
    {
        to = Model.From.Email;
    }
    ViewBag.Title = MessagesTexts.Details_ViewBag_Title;
}
<div class="chatbox min_full">
    <div class="ch_header">
        <div class="ch_header_cont">
            <h2 class="ch_to">@(to)</h2>
            @if (Model.Order != null)
            {
                <a href="@Url.Action("Details", "Orders", new { id = Model.Order.Id })" class="bn_blue">@MessagesTexts.Details_DetailsUrlAction</a>
            }
        </div>
    </div>
    <div class="messages-details">
        <div class="messages">
            <p id="loading">@MessagesTexts.Details_Loading...</p>
            <p id="more-messages" class="card">@MessagesTexts.Details_More_Messages...</p>

            <ul id="messages" style="display: none;">
                <li>
                    @Html.Partial("_Detail", Model)
                </li>
            </ul>
        </div>

        <div class="reply">
            @Html.Partial("_Reply", Model)
        </div>
    </div>

@section styles
{
    <link href="/Content/chatbox.css" rel="stylesheet" type="text/css" />
}

@section scripts
{
        <script src="~/Scripts/jquery.signalR-2.2.2.min.js" type="text/javascript"></script>
        <script src="~/signalr/hubs" type="text/javascript"></script>

        <script type="text/javascript">

        $(document).ready(function () {
            $("#more-messages").click(function() {

            });

            $.connection.messagesHub.client.receiveMessage = function(message) {
                console.log("receiveMessage");

                var newMessage = $($.parseHTML("<li>" + message + "</li>"));
                $(".message-item", newMessage).removeClass("ToHim").addClass("ToMe").removeClass("Read").addClass("Unread").attr("data-status", "Unread");
                $("#messages").append(newMessage);
                $(".messages").animate({ scrollTop: $('.messages').prop("scrollHeight") }, 1000, processUnreadMessages);
            };
            $.connection.hub.reconnecting(function () {
                console.log("socket reconnecting...");
            });

            $.connection.hub.reconnected(function() {
                console.log("socket reconnected");
            });
            $.connection.hub.disconnected(function() {
                console.log("socket disconnected");
                setTimeout(connectSocket, 3000);
            });
            $.connection.hub.qs = 'threadId=@(Model.Id)';
            connectSocket();
            $.ajax({
                    cache: false,
                    async: true,
                    type: "GET",
                    url: "@Url.Action("ThreadMessages", new { threadId = Model.Id })",
                    success: function (data) {
                        $("#loading").hide();
                        $("#messages").append(data).show();
                        $(".messages").animate({ scrollTop: $('.messages').prop("scrollHeight") }, 1000, function() {
                            processUnreadMessages();
                            $(".messages").scroll(function () {
                                processUnreadMessages();
                            });
                        });
                    }
                });
        });

        $("#reply-form").submit(function (e) {
            e.preventDefault();

            var content = $("#@(Html.IdFor(x => Model.Content).ToString())");

            if (content.val().trim().length < 1) {
                return;
            }
            $("button[type=submit]").addClass("sending").attr("disabled", "disabled");
            var form = $("#reply-form");
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: form.prop('action'),
                data: form.serialize(),
                success: function (data) {
                    $("button[type=submit]").removeClass("sending").removeAttr("disabled");
                    $(content).val("");
                    $.connection.messagesHub.server.sendMessage("@(Model.Id)", data.toString());
                    $("#messages").append("<li>" + data + "</li>");
                    $(".messages").animate({ scrollTop: $('.messages').prop("scrollHeight") }, 1000);
                }
            });
        });

        function connectSocket() {
            console.log("trying to connect to socket");
            $.connection.hub.start().done(function (e) {
                console.log("socket started");
            }).fail(function(e) {
                console.log("socket not started");
                setTimeout(connectSocket, 3000);
            });
        }

        function processUnreadMessages() {
            var msj = $('.message-item.ToMe[data-status="Unread"]');
            if (msj.length === 0) {
                $("#more-messages").hide();
            } else {
                $.each(msj,
                    function (key, value) {
                        var item = $(value);
                        if (isInView(item)) {
                            item.attr("data-status", "Read");
                            markAsRead(item);
                        } else {
                            $("#more-messages").show();
                        }
                    });
            }
        }

        function isInView(elem) {
            var rf = $(window).scrollTop();
            var rt = $(window).scrollTop() + $(window).height();
            var ip = $(elem).offset().top + $(elem).height();

            console.log("A: " + rf + " - B: " + rt + " - C: " + ip);

            return rf < ip && ip < rt;
        }

        function markAsRead(item) {
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: "@Url.Action("MarkAsRead")?id=" + item.attr("data-id"),
                success: function (data) {
                    $(item).removeClass("Unread");
                    console.log("Message read:" + item.attr("data-id"));
                }
            });
        }
        </script>
    }
</div>