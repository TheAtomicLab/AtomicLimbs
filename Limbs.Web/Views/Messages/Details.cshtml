@model Limbs.Web.Entities.Models.MessageModel

<div class="messages-details">
    <h4>MessageModel</h4>
    <hr/>

    @Html.Partial("_Reply", Model)
    
    <p id="loading">Cargando mensajes...</p>

    <ul id="messages" style="display: none;">
        <li>
            @Html.Partial("_Detail", Model)
        </li>
    </ul>
</div>

@section scripts
{
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js" type="text/javascript"></script>
    <script src="~/signalr/hubs" type="text/javascript"></script>

    <script type="text/javascript">

        $(document).ready(function () {
            $.connection.messagesHub.client.receiveMessage = function(message) {
                console.log("receiveMessage");

                var newMessage = $($.parseHTML("<li>" + message + "</li>"));
                $(".message-item", newMessage).removeClass("ToHim").addClass("ToMe").removeClass("Read").addClass("Unread").attr("data-status", "Unread");;
                $("#messages").prepend(newMessage);
                processUnreadMessages();
            };
            $.connection.hub.reconnecting(function () {
                console.log("socket reconnecting...");
            });

            $.connection.hub.reconnected(function() {
                console.log("socket reconnected");
            });
            $.connection.hub.disconnected(function() {
                console.log("socket disconnected");
                connectSocket();
            });
            $.connection.hub.qs = 'threadId=@(Model.Id)';
            connectSocket();
            $.ajax({
                    cache: false,
                    async: true,
                    type: "GET",
                    url: "@Url.Action("ThreadMessages", new { threadId = Model.Id })",
                    success: function (data) {
                        $("#messages").prepend(data).show();
                        $("#loading").hide();
                        processUnreadMessages();
                    }
                });
        });

        $(window).scroll(function () {
            processUnreadMessages();
        });

        $("#reply-form").submit(function (e) {
            e.preventDefault();

            var content = $("#@(Html.IdFor(x => Model.Content).ToString())");

            if (content.val().length < 1) {
                return;
            }
            $("input[type=submit]").attr("disabled", "disabled");
            var form = $("#reply-form");
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: form.prop('action'),
                data: form.serialize(),
                success: function (data) {
                    $("input[type=submit]").removeAttr("disabled");
                    $(content).val("");
                    $.connection.messagesHub.server.sendMessage("@(Model.Id)", data.toString());
                    $("#messages").prepend("<li>" + data + "</li>");
                }
            });
        });

        function connectSocket() {
            console.log("trying to connect to socket");
            $.connection.hub.start().done(function (e) {
                console.log("socket started");
            }).fail(function(e) {
                console.log("socket not started");
                connectSocket();
            });
        }

        function processUnreadMessages() {
            $.each($('.message-item[data-status="Unread"]'),
                function (key, value) {
                    var item = $(value);
                    if (isInView(item)) {
                        item.attr("data-status", "Read");
                        markAsRead(item);
                    }
                });
        }

        function isInView(elem) {
            var rf = $(window).scrollTop();
            var rt = $(window).scrollTop() + $(window).height();
            var ip = $(elem).offset().top + $(elem).height();
            return rf < ip && ip < rt;
        }

        function markAsRead(item) {
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: "@Url.Action("MarkAsRead")?id=" + item.attr("data-id"),
                success: function (data) {
                    $(item).removeClass("Unread");
                    console.log("Message read:" + item.attr("data-id"));
                }
            });
        }
    </script>
}
